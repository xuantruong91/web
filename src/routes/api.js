const express = require('express');
const router = express.Router();
const connection = require('../config/database');
const nodemailer = require('nodemailer');
const XLSX = require("xlsx");
const fs = require("fs");
const path = require("path");
const plcController = require("../controllers/plcController");


router.get('/data', async (req, res) => {
    try {
        const [rows] = await connection.query('SELECT * FROM control_EC_pH ORDER BY id DESC');
        res.json({ data: rows, timestamp: new Date().getTime() }); // Th√™m timestamp ƒë·ªÉ tr√°nh cache
    } catch (error) {
        console.error("L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ MySQL:", error);
        res.status(500).json({ error: "L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ MySQL" });
    }
});

router.post('/send-email', async (req, res) => {
    try {
        const { email, data } = req.body;

        if (!email || !data.length) {
            return res.status(400).json({ message: "Thi·∫øu email ho·∫∑c d·ªØ li·ªáu r·ªóng" });
        }

        // T·∫°o th∆∞ m·ª•c temp n·∫øu ch∆∞a t·ªìn t·∫°i
        const tempDir = path.join(__dirname, "../temp");
        if (!fs.existsSync(tempDir)) {
            fs.mkdirSync(tempDir, { recursive: true });
        }

        // T·∫°o Workbook v√† Worksheet t·ª´ d·ªØ li·ªáu
        const wb = XLSX.utils.book_new();
        const ws = XLSX.utils.aoa_to_sheet([["ID", "Time", "N·ªìng ƒë·ªô EC", "N·ªìng ƒë·ªô pH"], ...data]);
        XLSX.utils.book_append_sheet(wb, ws, "Sheet1");

        // L∆∞u file Excel t·∫°m th·ªùi
        const filePath = path.join(__dirname, "../temp/data.xlsx");
        XLSX.writeFile(wb, filePath);

        // C·∫•u h√¨nh Gmail
        const transporter = nodemailer.createTransport({
            service: 'gmail',
            auth: {
                user: 'truong.nguyensinhvienbk91@hcmut.edu.vn',  // Email c·ªßa b·∫°n
                pass: 'bnwa bzty vsci giaz'       // M·∫≠t kh·∫©u ·ª©ng d·ª•ng (App Password)
            }
        });

        let mailOptions = {
            from: 'truong.nguyensinhvienbk91@hcmut.edu.vn',
            to: email,
            subject: 'D·ªØ li·ªáu t·ª´ h·ªá th·ªëng',
            text: "D·ªØ li·ªáu t·ª´ h·ªá th·ªëng ƒë∆∞·ª£c ƒë√≠nh k√®m trong file Excel.",
            attachments: [
                {
                    filename: "data.xlsx",
                    path: filePath
                }
            ]
        };

        await transporter.sendMail(mailOptions);

        // X√≥a file sau khi g·ª≠i ƒë·ªÉ kh√¥ng b·ªã ƒë·∫ßy b·ªô nh·ªõ
        fs.unlinkSync(filePath);

        res.json({ message: "üìß Email ƒë√£ g·ª≠i th√†nh c√¥ng v·ªõi file ƒë√≠nh k√®m!" });

    } catch (error) {
        console.error("‚ùå L·ªói g·ª≠i email:", error);
        res.status(500).json({ message: "L·ªói khi g·ª≠i email" });
    }
});
router.post('/clear-data', async (req, res) => {
    try {
        await connection.query("DELETE FROM control_EC_pH"); // X√≥a to√†n b·ªô d·ªØ li·ªáu
        await connection.query("ALTER TABLE control_EC_pH AUTO_INCREMENT = 1"); // Reset ID v·ªÅ 1

        res.json({ success: true, message: "D·ªØ li·ªáu ƒë√£ b·ªã x√≥a v√† ID ƒë√£ reset v·ªÅ 1!" });
    } catch (error) {
        console.error("L·ªói khi x√≥a d·ªØ li·ªáu:", error);
        res.status(500).json({ success: false, message: "L·ªói khi x√≥a d·ªØ li·ªáu!" });
    }
});


router.post('/button-press', async (req, res) => {
    const { device, state } = req.body;

    
    // L∆∞u xu·ªëng database nh∆∞ c≈©
    try {
        const [latestData] = await connection.query(
            "SELECT N·ªìng_ƒë·ªô_EC, N·ªìng_ƒë·ªô_pH FROM control_EC_pH ORDER BY id DESC LIMIT 1"
        );

        let ecValue = latestData.length > 0 ? latestData[0]["N·ªìng_ƒë·ªô_EC"] : null;
        let pHValue = latestData.length > 0 ? latestData[0]["N·ªìng_ƒë·ªô_pH"] : null;

        await connection.query(
            "INSERT INTO control_EC_pH (device, state, Time, N·ªìng_ƒë·ªô_EC, N·ªìng_ƒë·ªô_pH) VALUES (?, ?, NOW(), ?, ?)",
            [device, state, ecValue, pHValue]
        );

        res.json({ success: true, message: `Tr·∫°ng th√°i ${device} ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh ${state}!` });
    } catch (error) {
        console.error("L·ªói khi l∆∞u tr·∫°ng th√°i thi·∫øt b·ªã:", error);
        res.status(500).json({ success: false, message: "L·ªói khi l∆∞u tr·∫°ng th√°i thi·∫øt b·ªã!" });
    }
});
// API ƒë·ªçc d·ªØ li·ªáu t·ª´ PLC
router.get('/plc/read-tags', async (req, res) => {
    try {
        let buffer = Buffer.alloc(4);
        let success = s7client.ReadArea(snap7.S7AreaDB, 1, 0, 4, snap7.S7WLReal, buffer);
        
        if (!success) {
            throw new Error(s7client.ErrorText(s7client.LastError()));
        }

        let value = buffer.readFloatLE(0); // ƒê·ªçc gi√° tr·ªã t·ª´ buffer
        res.json({ success: true, value });
    } catch (error) {
        console.error("‚ùå L·ªói ƒë·ªçc d·ªØ li·ªáu PLC:", error);
        res.status(500).json({ success: false, message: "L·ªói ƒë·ªçc d·ªØ li·ªáu PLC!" });
    }
});


module.exports = router;
