<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DATA</title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

</head>
<style>
    th,
    td {
        padding: 5px;
        border-bottom: 1px solid #ddd;
    }

    th {
        background-color: #171817;
        color: white;
    }

    tr:hover {
        background-color: #f1f1f1;
    }
</style>

<body>
    <div class="topnav">
        <a href="/">Home</a>
        <a href="/create_user">Create Users</a>
        <a href="/list">List User</a>
        <a href="/data" class="active">DATA</a>
        <a href="/hmi">HMI</a>
    </div>
    <div class="topbar">
        <input type="text" id="search-input" placeholder="T√¨m ki·∫øm d·ªØ li·ªáu..." onkeyup="filterTable()">
        <button class="export-button" onclick="exportToExcel()">Xu·∫•t Excel</button>
        <button class="clear-button" onclick="clearTable()">X√≥a D·ªØ Li·ªáu</button>

    </div>


    <div class="main-container">
        <div class="chart-container">
            <div class="title">BI·ªÇU ƒê·ªí XU H∆Ø·ªöNG</div>
            <canvas id="trend-chart"></canvas>
        </div>
        <div class="table-container">
            <div class="title">B·∫¢NG D·ªÆ LI·ªÜU</div>
            <table>
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Time</th>
                        <th>N·ªìng ƒë·ªô EC</th>
                        <th>N·ªìng ƒë·ªô pH</th>
                    </tr>
                </thead>
                <tbody id="data-table">
                    <!-- D·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c t·∫£i t·ª´ API -->
                </tbody>
            </table>
        </div>
    </div>

    <script>
        async function clearTable() {
            if (!confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a to√†n b·ªô d·ªØ li·ªáu kh√¥ng?")) return;

            try {
                let response = await fetch('/api/clear-data', { method: 'POST' });
                let result = await response.json();

                if (result.success) {
                    alert("‚úÖ D·ªØ li·ªáu ƒë√£ b·ªã x√≥a!");
                    document.getElementById("data-table").innerHTML = ""; // X√≥a d·ªØ li·ªáu trong b·∫£ng
                    clearChart(); // G·ªçi h√†m x√≥a bi·ªÉu ƒë·ªì
                } else {
                    alert("‚ùå L·ªói khi x√≥a d·ªØ li·ªáu!");
                }
            } catch (error) {
                console.error("L·ªói khi x√≥a d·ªØ li·ªáu:", error);
                alert("‚ùå L·ªói khi x√≥a d·ªØ li·ªáu!");
            }
        }
        function clearChart() {
            if (trendChart) {
                trendChart.data.labels = [];
                trendChart.data.datasets.forEach(dataset => dataset.data = []);
                trendChart.update();
            }
        }



        let isFiltering = false; // Bi·∫øn ƒë·ªÉ ki·ªÉm tra c√≥ ƒëang t√¨m ki·∫øm kh√¥ng

        async function fetchData() {
            if (isFiltering) return; // N·∫øu ƒëang t√¨m ki·∫øm th√¨ kh√¥ng c·∫≠p nh·∫≠t d·ªØ li·ªáu m·ªõi

            try {
                let response = await fetch('/api/data?' + new Date().getTime()); // Tr√°nh cache d·ªØ li·ªáu c≈©
                let jsonData = await response.json();

                let tableBody = document.getElementById("data-table");
                tableBody.innerHTML = ""; // X√≥a d·ªØ li·ªáu c≈© tr∆∞·ªõc khi c·∫≠p nh·∫≠t

                jsonData.data.forEach(control_EC_pH => {
                    let row = document.createElement("tr");
                    row.innerHTML = `
                    <td>${control_EC_pH.ID}</td>
                    <td>${control_EC_pH.Time}</td>
                    <td>${control_EC_pH.N·ªìng_ƒë·ªô_EC}</td>
                    <td>${control_EC_pH.N·ªìng_ƒë·ªô_pH}</td>
                `;
                    tableBody.appendChild(row);
                });
            } catch (error) {
                console.error("L·ªói khi l·∫•y d·ªØ li·ªáu:", error);
            }
        }

        function filterTable() {
            let input = document.getElementById("search-input").value.toLowerCase();
            let rows = document.querySelectorAll("#data-table tr");

            isFiltering = input.length > 0; // N·∫øu c√≥ n·ªôi dung t√¨m ki·∫øm th√¨ d·ª´ng c·∫≠p nh·∫≠t API

            rows.forEach(row => {
                let cells = row.getElementsByTagName("td");
                let match = false;

                for (let cell of cells) {
                    let text = cell.textContent.toLowerCase();

                    if (/\d{1,2}-\d{1,2}-\d{4}/.control_EC_pH(input)) {
                        let dateCell = new Date(cells[1].textContent).toLocaleDateString('en-GB'); // Chuy·ªÉn sang DD-MM-YYYY
                        if (dateCell.includes(input)) {
                            match = true;
                            break;
                        }
                    } else if (text.includes(input)) {
                        match = true;
                        break;
                    }
                }

                row.style.display = match ? "" : "none";
            });
        }

        // Ki·ªÉm tra khi ng∆∞·ªùi d√πng x√≥a √¥ t√¨m ki·∫øm, ti·∫øp t·ª•c c·∫≠p nh·∫≠t API
        document.getElementById("search-input").addEventListener("input", function () {
            if (this.value.length === 0) {
                isFiltering = false;
                fetchData(); // G·ªçi l·∫°i API khi √¥ t√¨m ki·∫øm r·ªóng
            }
        });
        async function exportToExcel() {
            try {
                console.log("üîç ƒêang t·∫£i file m·∫´u...");
                let response = await fetch("/template/template.xls"); // ƒê∆∞·ªùng d·∫´n file m·∫´u

                if (!response.ok) throw new Error("‚ùå Kh√¥ng t√¨m th·∫•y file m·∫´u!");

                let arrayBuffer = await response.arrayBuffer();
                console.log("‚úÖ File m·∫´u t·∫£i th√†nh c√¥ng!");

                let wb = XLSX.read(arrayBuffer, { type: "array" });
                let ws = wb.Sheets["Sheet1"]; // Ch·ªçn sheet ƒë·ªÉ ghi d·ªØ li·ªáu

                let table = document.getElementById("data-table");
                let rows = table.querySelectorAll("tr");
                let searchValue = document.getElementById("search-input").value.trim();

                let dataToExport = [];

                if (searchValue === "") {
                    // üëâ N·∫øu kh√¥ng t√¨m ki·∫øm, l·∫•y to√†n b·ªô d·ªØ li·ªáu t·ª´ API
                    console.log("üåç L·∫•y to√†n b·ªô d·ªØ li·ªáu t·ª´ API...");
                    let apiResponse = await fetch('/api/data'); // G·ªçi API l·∫•y d·ªØ li·ªáu
                    let jsonData = await apiResponse.json();

                    dataToExport = jsonData.data.map(control_EC_pH => [
                        control_EC_pH.ID,
                        control_EC_pH.Time,
                        control_EC_pH.N·ªìng_ƒë·ªô_EC,
                        control_EC_pH.N·ªìng_ƒë·ªô_pH
                    ]);

                } else {
                    // üëâ N·∫øu ƒëang t√¨m ki·∫øm, ch·ªâ l·∫•y d·ªØ li·ªáu ƒëang hi·ªÉn th·ªã tr√™n b·∫£ng
                    console.log("üîç Xu·∫•t d·ªØ li·ªáu ƒëang hi·ªÉn th·ªã...");
                    rows.forEach(row => {
                        if (row.style.display !== "none") { // Ch·ªâ l·∫•y d√≤ng ƒëang hi·ªÉn th·ªã
                            let cells = row.querySelectorAll("td");
                            let rowData = Array.from(cells, cell => cell.textContent);
                            dataToExport.push(rowData);
                        }
                    });
                }

                // Ghi d·ªØ li·ªáu v√†o Excel t·ª´ d√≤ng th·ª© 8
                let rowIndex = 8;
                dataToExport.forEach(rowData => {
                    rowData.forEach((cellData, colIndex) => {
                        let cellRef = XLSX.utils.encode_cell({ r: rowIndex, c: colIndex });
                        ws[cellRef] = { v: cellData };
                    });
                    rowIndex++;
                });

                console.log("üìÅ ƒêang ghi file Excel...");
                XLSX.writeFile(wb, "data.xlsx");
                console.log("‚úÖ File Excel ƒë√£ ƒë∆∞·ª£c xu·∫•t!");

            } catch (error) {
                console.error("‚ùå L·ªói khi xu·∫•t file Excel:", error);
            }
        }
        // Th√™m n√∫t "G·ª≠i Email" b√™n c·∫°nh n√∫t "Xu·∫•t Excel"
        document.querySelector(".topbar").innerHTML += '<button class="email-button" onclick="openEmailPopup()">G·ª≠i Email</button>';

        document.body.innerHTML += `
    <div id="email-popup" class="popup" style="display: none;">
        <div class="popup-content">
            <span class="close" onclick="closeEmailPopup()">&times;</span>
            <h3>Nh·∫≠p Email</h3>
            <input type="email" id="email-input" placeholder="Nh·∫≠p email" required>
            <button onclick="sendEmail()">G·ª≠i</button>
        </div>
    </div>
    <style>
        .popup { position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; padding: 20px; box-shadow: 0 0 10px rgba(0,0,0,0.1); border-radius: 10px; z-index: 1000; }
        .popup-content { text-align: center; }
        .close { cursor: pointer; float: right; }
    </style>`;

        function openEmailPopup() {
            document.getElementById("email-popup").style.display = "block";
        }

        function closeEmailPopup() {
            document.getElementById("email-popup").style.display = "none";
        }

        async function sendEmail() {
            let email = document.getElementById("email-input").value;
            if (!email) return alert("‚ö†Ô∏è Vui l√≤ng nh·∫≠p email!");

            let dataToSend = [];
            document.querySelectorAll("#data-table tr").forEach(row => {
                if (row.style.display !== "none") {
                    let cells = row.querySelectorAll("td");
                    let rowData = Array.from(cells, cell => cell.textContent);
                    dataToSend.push(rowData);
                }
            });

            try {
                let response = await fetch("/api/send-email", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ email, data: dataToSend }),
                });

                let result = await response.json();
                alert(result.message);
                closeEmailPopup();

            } catch (error) {
                console.error("‚ùå L·ªói khi g·ª≠i email:", error);
                alert("‚ùå L·ªói g·ª≠i email! Vui l√≤ng th·ª≠ l·∫°i.");
            }
        }

        let trendChart;

        async function fetchData() {
            if (isFiltering) return;

            try {
                let response = await fetch('/api/data?' + new Date().getTime());
                let jsonData = await response.json();

                let tableBody = document.getElementById("data-table");
                tableBody.innerHTML = "";

                let rawData = jsonData.data; // D·ªØ li·ªáu g·ªëc t·ª´ API
                let sortedData = [...rawData].sort((a, b) => a.ID - b.ID); // h√†m sort s·∫Øp x·∫øp th·ª© t·ª±,n·∫øu a-b √¢m th√¨ 
                // gi·ªØ nguy√™n th·ª© t·ª±,ng∆∞·ª£c l·∫°i a-b d∆∞∆°ng th√¨ ƒë·ªïi ch·ªó 

                let ecData = [];
                let phData = [];
                let labels = [];

                rawData.forEach(control_EC_pH => { // D·ªØ li·ªáu b·∫£ng gi·ªØ nguy√™n
                    let row = document.createElement("tr");
                    row.innerHTML = `
                    <td>${control_EC_pH.ID}</td>
                    <td>${control_EC_pH.Time}</td>
                    <td>${control_EC_pH.N·ªìng_ƒë·ªô_EC}</td>
                    <td>${control_EC_pH.N·ªìng_ƒë·ªô_pH}</td>
                `;
                    tableBody.appendChild(row);
                });

                sortedData.forEach(control_EC_pH => { // D·ªØ li·ªáu bi·ªÉu ƒë·ªì s·∫Øp x·∫øp theo ID
                    ecData.push(control_EC_pH.N·ªìng_ƒë·ªô_EC);
                    phData.push(control_EC_pH.N·ªìng_ƒë·ªô_pH);
                    labels.push(control_EC_pH.Time);
                });

                updateChart(labels, ecData, phData);

            } catch (error) {
                console.error("L·ªói khi l·∫•y d·ªØ li·ªáu:", error);
            }
        }

        function updateChart(labels, ecData, phData) {
            let ctx = document.getElementById("trend-chart").getContext("2d");

            if (trendChart) {
                trendChart.data.labels = labels;
                trendChart.data.datasets[0].data = ecData;
                trendChart.data.datasets[1].data = phData;
                trendChart.update();
                return;
            }

            trendChart = new Chart(ctx, {
                type: "line",
                data: {
                    labels: labels,
                    datasets: [
                        {
                            label: "N·ªìng ƒë·ªô EC",
                            data: ecData,
                            borderColor: "rgba(75, 192, 192, 1)",
                            backgroundColor: "rgba(75, 192, 192, 0.2)",
                            borderWidth: 2,
                        },
                        {
                            label: "N·ªìng ƒë·ªô pH",
                            data: phData,
                            borderColor: "rgba(255, 99, 132, 1)",
                            backgroundColor: "rgba(255, 99, 132, 0.2)",
                            borderWidth: 2,
                        },
                    ],
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: 'Time',
                                font: { size: 14 }
                            }
                        },
                        y: {
                            title: {
                                display: true,
                                text: 'N·ªìng ƒë·ªô',
                                font: { size: 14 }
                            },
                        },
                        beginAtZero: true
                    },
                },
            });
        }






        setInterval(fetchData, 5000); // T·ª± ƒë·ªông c·∫≠p nh·∫≠t m·ªói 5 gi√¢y
        fetchData(); // G·ªçi ngay khi t·∫£i trang



    </script>
</body>

</html>