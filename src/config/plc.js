const snap7 = require('node-snap7');
const plc = new snap7.S7Client();
const bitMapping = require("./bitMapping");

// Th√¥ng tin k·∫øt n·ªëi PLC
const PLC_IP = "192.168.0.1"; // C·∫≠p nh·∫≠t IP c·ªßa PLC
const RACK = 0;
const SLOT = 1;

async function connectToPLC() {
    return new Promise((resolve, reject) => {
        plc.ConnectTo(PLC_IP, RACK, SLOT, (err) => {
            if (err) {
                console.error("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi PLC:", plc.ErrorText(err));
                reject(new Error("Kh√¥ng th·ªÉ k·∫øt n·ªëi PLC"));
            } else {
                console.log("‚úÖ K·∫øt n·ªëi PLC th√†nh c√¥ng!");
                resolve();
            }
        });
    });
}


// ƒê·ªçc d·ªØ li·ªáu t·ª´ PLC
// ƒê·ªçc d·ªØ li·ªáu t·ª´ PLC
async function readPLC() {
    return new Promise((resolve, reject) => {
        plc.ReadArea(plc.S7AreaDB, 2, 0, 1, plc.S7WLByte, (err, data) => {
            if (err) {
                console.error("‚ùå L·ªói ƒë·ªçc d·ªØ li·ªáu t·ª´ PLC:", plc.ErrorText(err));
                reject(err);
            } else {
                console.log("üì° D·ªØ li·ªáu PLC nh·∫≠n ƒë∆∞·ª£c:", data);

                let byte0 = data[0];
                let Motor1_Btn = (byte0 & 0x01) !== 0;  // Bit 0.0
                let Motor2_Btn = (byte0 & 0x02) !== 0;  // Bit 0.1
                let Mode_Btn = (byte0 & 0x02) !== 0;  // Bit 0.1

                console.log(`üîπ Motor1_Btn: ${Motor1_Btn}, Motor2_Btn: ${Motor2_Btn},Mode_Btn:${Mode_Btn}`);
                resolve({ Motor1_Btn, Motor2_Btn, Mode_Btn});
            }
        });
    });
}


// Ghi d·ªØ li·ªáu v√†o PLC
async function writePLC(device, state) {
    return new Promise((resolve, reject) => {
        const bitPosition = bitMapping[device]; // L·∫•y v·ªã tr√≠ bit t·ª´ file mapping
        if (bitPosition === undefined) {
            return reject(new Error(`‚ùå Thi·∫øt b·ªã "${device}" kh√¥ng h·ª£p l·ªá!`));
        }

        plc.ReadArea(plc.S7AreaDB, 2, 0, 1, plc.S7WLByte, (err, data) => {
            if (err) {
                console.error("‚ùå L·ªói ƒë·ªçc d·ªØ li·ªáu t·ª´ PLC tr∆∞·ªõc khi ghi:", plc.ErrorText(err));
                return reject(err);
            }

            let byte0 = data[0];

            if (state) {
                byte0 |= (1 << bitPosition); // B·∫≠t bit
            } else {
                byte0 &= ~(1 << bitPosition); // T·∫Øt bit
            }

            let buffer = Buffer.alloc(1);
            buffer[0] = byte0;

            plc.WriteArea(plc.S7AreaDB, 2, 0, 1, plc.S7WLByte, buffer, (err) => {
                if (err) {
                    console.error("‚ùå L·ªói ghi d·ªØ li·ªáu v√†o PLC:", plc.ErrorText(err));
                    return reject(err);
                }
                console.log(`‚úÖ Ghi th√†nh c√¥ng! Gi√° tr·ªã Byte: ${byte0.toString(2).padStart(8, "0")}`);
                resolve();
            });
        });
    });
}

module.exports = { connectToPLC, readPLC, writePLC };
